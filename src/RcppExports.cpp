// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// roll_hampel_cpp
Rcpp::NumericVector roll_hampel_cpp(Rcpp::NumericVector x, unsigned int width, int by, Rcpp::String const& align, Rcpp::LogicalVector na_rm);
RcppExport SEXP _MazamaRollUtils_roll_hampel_cpp(SEXP xSEXP, SEXP widthSEXP, SEXP bySEXP, SEXP alignSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type by(bySEXP);
    Rcpp::traits::input_parameter< Rcpp::String const& >::type align(alignSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_hampel_cpp(x, width, by, align, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// roll_MAD_cpp
Rcpp::NumericVector roll_MAD_cpp(Rcpp::NumericVector x, unsigned int width, int by, Rcpp::String const& align, Rcpp::LogicalVector na_rm);
RcppExport SEXP _MazamaRollUtils_roll_MAD_cpp(SEXP xSEXP, SEXP widthSEXP, SEXP bySEXP, SEXP alignSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type by(bySEXP);
    Rcpp::traits::input_parameter< Rcpp::String const& >::type align(alignSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_MAD_cpp(x, width, by, align, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// roll_max_cpp
Rcpp::NumericVector roll_max_cpp(Rcpp::NumericVector x, unsigned int width, int by, Rcpp::String const& align, Rcpp::LogicalVector na_rm);
RcppExport SEXP _MazamaRollUtils_roll_max_cpp(SEXP xSEXP, SEXP widthSEXP, SEXP bySEXP, SEXP alignSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type by(bySEXP);
    Rcpp::traits::input_parameter< Rcpp::String const& >::type align(alignSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_max_cpp(x, width, by, align, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// roll_mean_cpp
Rcpp::NumericVector roll_mean_cpp(Rcpp::NumericVector x, unsigned int width, int by, Rcpp::String const& align, Rcpp::LogicalVector na_rm, Rcpp::Nullable<Rcpp::NumericVector> weights);
RcppExport SEXP _MazamaRollUtils_roll_mean_cpp(SEXP xSEXP, SEXP widthSEXP, SEXP bySEXP, SEXP alignSEXP, SEXP na_rmSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type by(bySEXP);
    Rcpp::traits::input_parameter< Rcpp::String const& >::type align(alignSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_mean_cpp(x, width, by, align, na_rm, weights));
    return rcpp_result_gen;
END_RCPP
}
// roll_median_cpp
Rcpp::NumericVector roll_median_cpp(Rcpp::NumericVector x, unsigned int width, int by, Rcpp::String const& align, Rcpp::LogicalVector na_rm);
RcppExport SEXP _MazamaRollUtils_roll_median_cpp(SEXP xSEXP, SEXP widthSEXP, SEXP bySEXP, SEXP alignSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type by(bySEXP);
    Rcpp::traits::input_parameter< Rcpp::String const& >::type align(alignSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_median_cpp(x, width, by, align, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// roll_min_cpp
Rcpp::NumericVector roll_min_cpp(Rcpp::NumericVector x, unsigned int width, int by, Rcpp::String const& align, Rcpp::LogicalVector na_rm);
RcppExport SEXP _MazamaRollUtils_roll_min_cpp(SEXP xSEXP, SEXP widthSEXP, SEXP bySEXP, SEXP alignSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type by(bySEXP);
    Rcpp::traits::input_parameter< Rcpp::String const& >::type align(alignSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_min_cpp(x, width, by, align, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// roll_prod_cpp
Rcpp::NumericVector roll_prod_cpp(Rcpp::NumericVector x, unsigned int width, int by, Rcpp::String const& align, Rcpp::LogicalVector na_rm);
RcppExport SEXP _MazamaRollUtils_roll_prod_cpp(SEXP xSEXP, SEXP widthSEXP, SEXP bySEXP, SEXP alignSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type by(bySEXP);
    Rcpp::traits::input_parameter< Rcpp::String const& >::type align(alignSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_prod_cpp(x, width, by, align, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// roll_sd_cpp
Rcpp::NumericVector roll_sd_cpp(Rcpp::NumericVector x, unsigned int width, int by, Rcpp::String const& align, Rcpp::LogicalVector na_rm);
RcppExport SEXP _MazamaRollUtils_roll_sd_cpp(SEXP xSEXP, SEXP widthSEXP, SEXP bySEXP, SEXP alignSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type by(bySEXP);
    Rcpp::traits::input_parameter< Rcpp::String const& >::type align(alignSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_sd_cpp(x, width, by, align, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// roll_sum_cpp
Rcpp::NumericVector roll_sum_cpp(Rcpp::NumericVector x, unsigned int width, int by, Rcpp::String const& align, Rcpp::LogicalVector na_rm);
RcppExport SEXP _MazamaRollUtils_roll_sum_cpp(SEXP xSEXP, SEXP widthSEXP, SEXP bySEXP, SEXP alignSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type by(bySEXP);
    Rcpp::traits::input_parameter< Rcpp::String const& >::type align(alignSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_sum_cpp(x, width, by, align, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// roll_var_cpp
Rcpp::NumericVector roll_var_cpp(Rcpp::NumericVector x, unsigned int width, int by, Rcpp::String const& align, Rcpp::LogicalVector na_rm);
RcppExport SEXP _MazamaRollUtils_roll_var_cpp(SEXP xSEXP, SEXP widthSEXP, SEXP bySEXP, SEXP alignSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type by(bySEXP);
    Rcpp::traits::input_parameter< Rcpp::String const& >::type align(alignSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_var_cpp(x, width, by, align, na_rm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MazamaRollUtils_roll_hampel_cpp", (DL_FUNC) &_MazamaRollUtils_roll_hampel_cpp, 5},
    {"_MazamaRollUtils_roll_MAD_cpp", (DL_FUNC) &_MazamaRollUtils_roll_MAD_cpp, 5},
    {"_MazamaRollUtils_roll_max_cpp", (DL_FUNC) &_MazamaRollUtils_roll_max_cpp, 5},
    {"_MazamaRollUtils_roll_mean_cpp", (DL_FUNC) &_MazamaRollUtils_roll_mean_cpp, 6},
    {"_MazamaRollUtils_roll_median_cpp", (DL_FUNC) &_MazamaRollUtils_roll_median_cpp, 5},
    {"_MazamaRollUtils_roll_min_cpp", (DL_FUNC) &_MazamaRollUtils_roll_min_cpp, 5},
    {"_MazamaRollUtils_roll_prod_cpp", (DL_FUNC) &_MazamaRollUtils_roll_prod_cpp, 5},
    {"_MazamaRollUtils_roll_sd_cpp", (DL_FUNC) &_MazamaRollUtils_roll_sd_cpp, 5},
    {"_MazamaRollUtils_roll_sum_cpp", (DL_FUNC) &_MazamaRollUtils_roll_sum_cpp, 5},
    {"_MazamaRollUtils_roll_var_cpp", (DL_FUNC) &_MazamaRollUtils_roll_var_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_MazamaRollUtils(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
